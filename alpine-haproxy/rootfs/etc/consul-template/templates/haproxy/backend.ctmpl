{{- $name := env "HAPROXY_TEMPLATE_BACKEND_SERVICENAME" -}}
{{- $tag := env "HAPROXY_TEMPLATE_BACKEND_SERVICETAG" -}}
{{- $haproxy_stats_username := env "HAPROXY_TEMPLATE_BACKEND_STATSUSERNAME" -}}
{{- $haproxy_stats_password := env "HAPROXY_TEMPLATE_BACKEND_STATSPASSWORD" -}}
{{- $haproxy_stats_port := env "HAPROXY_TEMPLATE_BACKEND_STATSPORT" -}}
{{- $haproxy_stats_uri := env "HAPROXY_TEMPLATE_BACKEND_STATSURI" -}}
{{- $haproxy_stats_realm := env "HAPROXY_TEMPLATE_BACKEND_STATSREALM" -}}
global
    log 127.0.0.1 format rfc5424 local0 info
    maxconn 1024

defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5s
    timeout client 30s
    timeout server 30s

{{if and $haproxy_stats_username $haproxy_stats_password}}
listen stats
    bind :{{if $haproxy_stats_port}}{{$haproxy_stats_port}}{{else}}1936{{end}}
    mode http
    stats enable
    stats uri {{if $haproxy_stats_uri}}{{$haproxy_stats_uri}}{{else}}/haproxy?stats{{end}}
    stats realm {{if $haproxy_stats_realm}}{{$haproxy_stats_realm}}{{else}}Haproxy\ Statistics{{end}}
    stats auth {{print $haproxy_stats_username ":" $haproxy_stats_password}}
    stats hide-version
    stats refresh 30s
    stats show-node
{{end}}

frontend http-in
    bind *:80
    option forwardfor
    option http-server-close
    reqadd X-Forwarded-Proto:\ http
    default_backend http-out


backend http-out
    balance leastconn
    {{range service (print $tag "." $name) -}}
    server {{.Address}} {{.Address}}:{{.Port}} check
    {{else -}}
    errorfile 502 /etc/haproxy/errors/502.http # no available services
    {{end -}}
